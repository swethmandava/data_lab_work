Input: I, instance set of current node
Input: d, feature dimension

//Serial Pseudo Code

For each node
	G = sum(gi) , H = sum(hi)
	For i = 1 to num_features do
		GL = 0, HL = 0
		For j in sorted(I by features i) do
			GL = GL + gj, HL = HL + hj
			GR = G - GL, HR = H - HL
			score_j = compute_score(GL, HL, GR, HR, G, H)
			score = max(score, score_j)
		End
	End
	Further Split node on max Score
End

// Parallelized Pseudo Code

G = segmented_reduce(gi) , H = segmented_reduce(hi)
For i = 1 to num_features do
	GL = inclusive_segmented_scan(gj, segmented_sorted(I by features i))
	HL = inclusive_segmented_scan(hj, segmented_sorted(I by features i))
	score_j = kernel_compute_score(GL, HL, G, H)
	score = segmented_reduce(score_j)
End
max_score = all_reduce each scores
Further Split Nodes using max Score from each segment
